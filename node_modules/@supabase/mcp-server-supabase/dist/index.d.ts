import { SupabasePlatform } from './platform/index.js';
import * as _modelcontextprotocol_sdk_server_index_js from '@modelcontextprotocol/sdk/server/index.js';
import { z } from 'zod';
import '@supabase/mcp-utils';

type SupabaseApiPlatformOptions = {
    /**
     * The access token for the Supabase Management API.
     */
    accessToken: string;
    /**
     * The API URL for the Supabase Management API.
     */
    apiUrl?: string;
};
/**
 * Creates a Supabase platform implementation using the Supabase Management API.
 */
declare function createSupabaseApiPlatform(options: SupabaseApiPlatformOptions): SupabasePlatform;

type SupabasePlatformOptions = {
    /**
     * The access token for the Supabase Management API.
     */
    accessToken: string;
    /**
     * The API URL for the Supabase Management API.
     */
    apiUrl?: string;
};
type SupabaseMcpServerOptions = {
    /**
     * Platform implementation for Supabase.
     */
    platform: SupabasePlatform;
    /**
     * The API URL for the Supabase Content API.
     */
    contentApiUrl?: string;
    /**
     * The project ID to scope the server to.
     *
     * If undefined, the server will have access
     * to all organizations and projects for the user.
     */
    projectId?: string;
    /**
     * Executes database queries in read-only mode if true.
     */
    readOnly?: boolean;
    /**
     * Features to enable.
     * Options: 'account', 'branching', 'database', 'debug', 'development', 'docs', 'functions', 'storage'
     */
    features?: string[];
};
declare const featureGroupSchema: z.ZodEnum<["docs", "account", "database", "debug", "development", "functions", "branching", "storage"]>;
type FeatureGroup = z.infer<typeof featureGroupSchema>;
/**
 * Creates an MCP server for interacting with Supabase.
 */
declare function createSupabaseMcpServer(options: SupabaseMcpServerOptions): _modelcontextprotocol_sdk_server_index_js.Server<{
    method: string;
    params?: {
        [x: string]: unknown;
        _meta?: {
            [x: string]: unknown;
            progressToken?: string | number | undefined;
        } | undefined;
    } | undefined;
}, {
    method: string;
    params?: {
        [x: string]: unknown;
        _meta?: {
            [x: string]: unknown;
        } | undefined;
    } | undefined;
}, {
    [x: string]: unknown;
    _meta?: {
        [x: string]: unknown;
    } | undefined;
}>;

export { type FeatureGroup, type SupabaseApiPlatformOptions, type SupabaseMcpServerOptions, SupabasePlatform, type SupabasePlatformOptions, createSupabaseApiPlatform, createSupabaseMcpServer };
