var __classPrivateFieldSet = (this && this.__classPrivateFieldSet) || function (receiver, state, value, kind, f) {
    if (kind === "m") throw new TypeError("Private method is not writable");
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a setter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot write private member to an object whose class did not declare it");
    return (kind === "a" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;
};
var __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, state, kind, f) {
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a getter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
    return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
};
var _HttpCache_cache, _HttpCache_readOnly;
// Copyright 2018-2024 the Deno authors. MIT license.
import * as dntShim from "../../../../../_dnt.shims.js";
import { isAbsolute } from "./deps.js";
import { assert } from "./util.js";
import { instantiate, } from "./lib/deno_cache_dir.generated.js";
export class HttpCache {
    constructor(cache, readOnly) {
        _HttpCache_cache.set(this, void 0);
        _HttpCache_readOnly.set(this, void 0);
        __classPrivateFieldSet(this, _HttpCache_cache, cache, "f");
        __classPrivateFieldSet(this, _HttpCache_readOnly, readOnly, "f");
    }
    static async create(options) {
        assert(isAbsolute(options.root), "Root must be an absolute path.");
        if (options.vendorRoot != null) {
            assert(isAbsolute(options.vendorRoot), "Vendor root must be an absolute path.");
        }
        const { GlobalHttpCache, LocalHttpCache } = await instantiate();
        let cache;
        if (options.vendorRoot != null) {
            cache = LocalHttpCache.new(options.vendorRoot, options.root);
        }
        else {
            cache = GlobalHttpCache.new(options.root);
        }
        return new HttpCache(cache, options.readOnly);
    }
    [(_HttpCache_cache = new WeakMap(), _HttpCache_readOnly = new WeakMap(), Symbol.dispose)]() {
        this.free();
    }
    free() {
        __classPrivateFieldGet(this, _HttpCache_cache, "f")?.free();
    }
    getHeaders(url) {
        const map = __classPrivateFieldGet(this, _HttpCache_cache, "f").getHeaders(url.toString());
        return map == null ? undefined : Object.fromEntries(map);
    }
    get(url, options) {
        const data = __classPrivateFieldGet(this, _HttpCache_cache, "f").getFileBytes(url.toString(), options?.checksum, options?.allowCopyGlobalToLocal ?? true);
        return data == null ? undefined : data;
    }
    set(url, headers, content) {
        if (__classPrivateFieldGet(this, _HttpCache_readOnly, "f") === undefined) {
            __classPrivateFieldSet(this, _HttpCache_readOnly, (dntShim.Deno.permissions.querySync({ name: "write" })).state === "denied"
                ? true
                : false, "f");
        }
        if (__classPrivateFieldGet(this, _HttpCache_readOnly, "f")) {
            return;
        }
        __classPrivateFieldGet(this, _HttpCache_cache, "f").set(url.toString(), headers, content);
    }
}
