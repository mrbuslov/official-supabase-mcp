/**
 * Serialize a module graph into eszip.
 * @param {any} roots
 * @param {Function} loader
 * @param {any} import_map_url
 * @returns {Promise<Uint8Array>}
 */
export function build(roots: any, loader: Function, import_map_url: any): Promise<Uint8Array>;
export function instantiate(opts: any): Promise<{
    build: typeof build;
    Parser: typeof Parser;
}>;
export function instantiateWithInstance(opts: any): Promise<{
    instance: any;
    exports: {
        build: typeof build;
        Parser: typeof Parser;
    };
}>;
export function isInstantiated(): boolean;
export function cacheToLocalDir(url: any, decompress: any): Promise<any>;
export function fetchWithRetries(url: any, maxRetries?: number): Promise<dntShim.Response>;
/** */
export class Parser {
    __destroy_into_raw(): number;
    __wbg_ptr: number;
    free(): void;
    /**
     * Parse from a BYOB readable stream.
     * @param {ReadableStreamBYOBReader} stream
     * @returns {Promise<any>}
     */
    parse(stream: ReadableStreamBYOBReader): Promise<any>;
    /**
     * Parse from an in-memory buffer.
     * @param {Uint8Array} buffer
     * @returns {Promise<any>}
     */
    parseBytes(buffer: Uint8Array): Promise<any>;
    /**
     * Load module sources.
     * @returns {Promise<any>}
     */
    load(): Promise<any>;
    /**
     * Get a module source.
     * @param {string} specifier
     * @returns {Promise<any>}
     */
    getModuleSource(specifier: string): Promise<any>;
    /**
     * Get a module sourcemap.
     * @param {string} specifier
     * @returns {Promise<any>}
     */
    getModuleSourceMap(specifier: string): Promise<any>;
}
import * as dntShim from "./_dnt.shims.js";
//# sourceMappingURL=eszip_wasm.generated.d.ts.map